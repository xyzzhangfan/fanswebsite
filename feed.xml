<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="https://xyzzhangfan.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://xyzzhangfan.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2024-08-28T03:46:37+00:00</updated><id>https://xyzzhangfan.github.io/feed.xml</id><title type="html">Fan’s Website</title><subtitle>Goals determine what you going to be! </subtitle><entry><title type="html">Setup the working environment</title><link href="https://xyzzhangfan.github.io/blog/2024/Working_environment_setup/" rel="alternate" type="text/html" title="Setup the working environment"/><published>2024-08-27T00:00:00+00:00</published><updated>2024-08-27T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2024/Working_environment_setup</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2024/Working_environment_setup/"><![CDATA[<h2 id="goal">Goal</h2> <ol> <li>Install and setup <code class="language-plaintext highlighter-rouge">Oh-my-zsh</code> with plugins.</li> <li>Install and setup VIM with plugins.</li> <li>Install and setup git.</li> <li>Install <code class="language-plaintext highlighter-rouge">Oh-my-TMUX</code>.</li> <li>Use ctag to generate tags for vim</li> </ol> <h2 id="install-and-setup-oh-my-zsh">Install and setup <code class="language-plaintext highlighter-rouge">Oh-my-zsh</code>:</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  sh <span class="nt">-c</span> <span class="s2">"</span><span class="si">$(</span>curl <span class="nt">-fsSL</span> https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh<span class="si">)</span><span class="s2">"</span>
</code></pre></div></div> <h2 id="install-plugins-for-oh-my-zsh">Install plugins for <code class="language-plaintext highlighter-rouge">Oh-my-zsh</code>:</h2> <ol> <li>Install the theme Powerline10k: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone <span class="nt">--depth</span><span class="o">=</span>1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k <span class="nb">echo</span> <span class="s1">'source ~/powerlevel10k/powerlevel10k.zsh-theme'</span> <span class="o">&gt;&gt;</span>~/.zshrc
</code></pre></div> </div> </li> <li>Install plugin zsh-autosuggestions: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone https://github.com/zsh-users/zsh-autosuggestions <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-autosuggestions
</code></pre></div> </div> </li> <li>Install plugin zsh-syntax-highlighting: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="k">${</span><span class="nv">ZSH_CUSTOM</span><span class="k">:-</span><span class="p">~/.oh-my-zsh/custom</span><span class="k">}</span>/plugins/zsh-syntax-highlighting
</code></pre></div> </div> </li> <li>update the plugin section in your ~/.zshrc file: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">ZSH_THEME</span><span class="o">=</span><span class="s2">"powerlevel10k/powerlevel10k"</span> <span class="c">#place your theme with powerline10k</span>
 <span class="nv">plugins</span><span class="o">=(</span> 
   <span class="c"># other plugins...</span>
   zsh-syntax-highlighting
   zsh-autosuggestions<span class="o">)</span>
   <span class="nv">ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE</span><span class="o">=</span><span class="s2">"fg=#19a9ec,bold,underline"</span>
   <span class="nb">source</span> <span class="nv">$ZSH</span>/oh-my-zsh.sh
   <span class="c"># Bindkey</span>
   bindkey <span class="s1">'^j'</span> autosuggest-accept <span class="c"># ctrl+j to accept suggestion.</span>
</code></pre></div> </div> </li> <li>Install the Tmux2 plugin(optional): <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nv">plugins</span><span class="o">=(</span>
   <span class="c"># other plugins</span>
   tmux
 <span class="o">)</span>
 <span class="nv">ZSH_TMUX_AUTOSTART</span><span class="o">=</span><span class="nb">true</span> <span class="c"># auto start tmux session.</span>
</code></pre></div> </div> <h2 id="install-vimnvim-with-plugins">Install Vim/nvim with plugins:</h2> </li> </ol> <p>[!Note] Some plugins such as verible-verilog-ls needs VIM9 to show the warning during editing.</p> <ol> <li>nvim could be easily installed on ubuntu: <code class="language-plaintext highlighter-rouge">sudo apt install neovim</code></li> <li>nvim could use your ~/.vimrc file by adding following into your <code class="language-plaintext highlighter-rouge">~/.config/nvim/init.vim</code>: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">set </span>runtimepath^<span class="o">=</span>~/.vim runtimepath+<span class="o">=</span>~/.vim/after
 <span class="nb">let</span> &amp;packpath<span class="o">=</span>&amp;runtimepath
 <span class="nb">source</span> ~/.vimrc
</code></pre></div> </div> </li> <li>Install Vundle to manage VIM plugins: <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
</code></pre></div> </div> <p>put the following into your <code class="language-plaintext highlighter-rouge">~/.vimrc</code>, create the file if you don’t have one.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> set tabstop = 2
 set shiftwidth = 2
 set expandtab = 2
 syntax enable
 set nocompatible              " be iMproved, required
 filetype off                  " required
 let mapleader = ","
 let g:NERDTreeWinPos = "bottom"
 let NERDTreeShowHidden = 0
 let NERDTreeIgnore = ['\.pyc$', '__pycache__']
 let g:NERDTreeWinSize = 15
 map &lt;leader&gt;nn :NERDTreeToggle&lt;cr&gt;
 map &lt;leader&gt;nb :NERDTreeFromBookmark
 map &lt;leader&gt;nf :NERDTreeFind&lt;cr&gt;
 map &lt;leader&gt;f  :Files&lt;CR&gt;
 " set the runtime path to include Vundle and initialize
 set rtp+=~/.vim/bundle/Vundle.vim
 call vundle#begin()
 " alternatively, pass a path where Vundle should install plugins
 "call vundle#begin('~/some/path/here')

 " let Vundle manage Vundle, required

 " My vim plugins:
 Plugin 'VundleVim/Vundle.vim'
 Plugin 'preservim/nerdcommenter.vim'
 Plugin 'preservim/nerdtree.vim'
 Plugin 'jiangmiao/autopairs.vim'
 Plugin 'skywind3000/vim-auto-popmenu'
 Plugin 'airblade/vim-gitgutter'
 Plugin 'prabirshrestha/vim-lsp'
 Plugin 'junegunn/fzf'
 Plugin 'junegunn/fzf.vim'

 " All of your Plugins must be added before the following line
 call vundle#end()            " required
 filetype plugin indent on    " required
 " To ignore plugin indent changes, instead use:
 "filetype plugin on
 inoremap &lt;expr&gt; &lt;Tab&gt;  pumvisible() ? "\&lt;C-n&gt;" : "\&lt;Tab&gt;"
 inoremap &lt;expr&gt; &lt;S-Tab&gt;  pumvisible() ? "\&lt;C-p&gt;" : "\&lt;S-Tab&gt;"
 set completeopt=menu,menuone,noselect

 "
 " Brief help
 " :PluginList       - lists configured plugins
 " :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
 " :PluginSearch foo - searches for foo; append `!` to refresh local cache
 " :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
 "
 " see :h vundle for more details or wiki for FAQ
 " Put your non-Plugin stuff after this line
 " This section to the end is optional, add it if you want to use verible-verilog-ls with vim.
 if executable('verible-verilog-ls')
     au User lsp_setup call lsp#register_server({
         \ 'name': 'verible-verilog-ls',
         \ 'cmd': {server_info-&gt;[PATH_TO_VERIBLE_VERILOG_LS]},
         \ 'allowlist': ['verilog', 'systemverilog'],
         \ })
 endif
 function! s:on_lsp_buffer_enabled() abort
   setlocal omnifunc=lsp#complete
   setlocal signcolumn=yes
   if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
   nmap &lt;buffer&gt; gd &lt;plug&gt;(lsp-definition)
   nmap &lt;buffer&gt; gs &lt;plug&gt;(lsp-document-symbol-search)
   nmap &lt;buffer&gt; gS &lt;plug&gt;(lsp-workspace-symbol-search)
   nmap &lt;buffer&gt; gr &lt;plug&gt;(lsp-references)
   nmap &lt;buffer&gt; gi &lt;plug&gt;(lsp-implementation)
   nmap &lt;buffer&gt; gt &lt;plug&gt;(lsp-type-definition)
   nmap &lt;buffer&gt; &lt;leader&gt;rn &lt;plug&gt;(lsp-rename)
   nmap &lt;buffer&gt; [g &lt;plug&gt;(lsp-previous-diagnostic)
   nmap &lt;buffer&gt; ]g &lt;plug&gt;(lsp-next-diagnostic)
   nmap &lt;buffer&gt; K &lt;plug&gt;(lsp-hover)
   nnoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-f&gt; lsp#scroll(+4)
   nnoremap &lt;buffer&gt; &lt;expr&gt;&lt;c-d&gt; lsp#scroll(-4)

   let g:lsp_format_sync_timeout = 1000
   autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
        
   " refer to doc to add more commands
 endfunction

 augroup lsp_install
     au!
     " call s:on_lsp_buffer_enabled only for languages that has the server registered.
     autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
 augroup END
</code></pre></div> </div> </li> </ol> <h2 id="install-and-setup-git">Install and setup git</h2> <ol> <li>Install: <code class="language-plaintext highlighter-rouge">sudo apt install git-all</code></li> <li>Setup: <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> git config --global --get user.email
 git config --global pull.rebase true
 git config --global diff.tool vimdiff
 git config --global difftool.prompt false
 git config merge.tool vimdiff
 git config merge.conflictstyle diff3
 git config mergetool.prompt false
</code></pre></div> </div> <p>[!Note] Use <code class="language-plaintext highlighter-rouge">git log --all --decorate --oneline --graph</code> to show a nice git commit history.</p> </li> </ol> <h2 id="install-tmux">Install Tmux</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nv">$ </span>git clone https://github.com/gpakosz/.tmux.git <span class="s2">"/path/to/oh-my-tmux"</span>
  <span class="nv">$ </span><span class="nb">mkdir</span> <span class="nt">-p</span> <span class="s2">"~/.config/tmux"</span>
  <span class="nv">$ </span><span class="nb">ln</span> <span class="nt">-s</span> <span class="s2">"/path/to/oh-my-tmux/.tmux.conf"</span> <span class="s2">"~/.config/tmux/tmux.conf"</span>
  <span class="nv">$ </span><span class="nb">cp</span> <span class="s2">"/path/to/oh-my-tmux/.tmux.conf.local"</span> <span class="s2">"~/.config/tmux/tmux.conf.local"</span>
</code></pre></div></div> <h2 id="install-ctags-with-vim">Install ctags with VIM</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
  $ git clone https://github.com/universal-ctags/ctags.git
  $ cd ctags
  $ ./autogen.sh
  $ ./configure  # use --prefix=/where/you/want to override installation directory, defaults to /usr/local
  $ make
  $ make install # may require extra privileges depending on where to install
```
Get into the root directory of your project and run ```ctags -R *``` to generate the tags file.

Put following line into your `~/.vimrc` file to automatically load the tags file:
```bash
set tags=./tags;,tags;
```
</code></pre></div></div> <p>Now you can use <code class="language-plaintext highlighter-rouge">ctrl + ]</code> to jump to the defination of function/variable. Use <code class="language-plaintext highlighter-rouge">ctrl+ t</code> to go back.</p> <p>[!note] Added <code class="language-plaintext highlighter-rouge">nnoremap &lt;C-]&gt; :tag &lt;C-R&gt;&lt;C-W&gt;&lt;CR&gt;</code> into your <code class="language-plaintext highlighter-rouge">~/.vimrc</code> to avoid the lazy load of tags file.</p>]]></content><author><name>xyzzhangfan</name></author><category term="Linux"/><summary type="html"><![CDATA[Goal Install and setup Oh-my-zsh with plugins. Install and setup VIM with plugins. Install and setup git. Install Oh-my-TMUX. Use ctag to generate tags for vim Install and setup Oh-my-zsh: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" Install plugins for Oh-my-zsh: Install the theme Powerline10k: git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ~/powerlevel10k echo 'source ~/powerlevel10k/powerlevel10k.zsh-theme' &gt;&gt;~/.zshrc Install plugin zsh-autosuggestions: git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions Install plugin zsh-syntax-highlighting: git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting update the plugin section in your ~/.zshrc file: ZSH_THEME="powerlevel10k/powerlevel10k" #place your theme with powerline10k plugins=( # other plugins... zsh-syntax-highlighting zsh-autosuggestions) ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#19a9ec,bold,underline" source $ZSH/oh-my-zsh.sh # Bindkey bindkey '^j' autosuggest-accept # ctrl+j to accept suggestion. Install the Tmux2 plugin(optional): plugins=( # other plugins tmux ) ZSH_TMUX_AUTOSTART=true # auto start tmux session. Install Vim/nvim with plugins: [!Note] Some plugins such as verible-verilog-ls needs VIM9 to show the warning during editing.]]></summary></entry><entry><title type="html">Socks proxy over V2ray</title><link href="https://xyzzhangfan.github.io/blog/2023/Proxy-Over-V2ray/" rel="alternate" type="text/html" title="Socks proxy over V2ray"/><published>2023-12-25T00:00:00+00:00</published><updated>2023-12-25T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2023/Proxy%20Over%20V2ray</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2023/Proxy-Over-V2ray/"><![CDATA[<h2 id="goal">Goal:</h2> <ul> <li>Server A: A cloud server(i.e. AWS/Google Cloud/Oracle Cloud) with public IP address</li> <li>Server B: A internal server which may need vpn for access.</li> <li>Client C: A personal labtop/desktop trying to access the Server B without typing password to VPN everytime.</li> </ul> <h2 id="method">Method:</h2> <ol> <li>Server B using ssh reverse proxy connect to server A and bind to a port (i.e. 12345).</li> <li>Using the -D flag in ssh to setup Socks5 proxy.</li> <li>Setup V2ray on Server A and route all the V2ray traffic through the ssh turnnel.</li> </ol> <h2 id="on-server-a">On Server A:</h2> <ol> <li>Install V2Ray <blockquote> <p>bash -c “$(curl -L https:/github.com/v2fly/fhs-install-v2ray/raw/master/install-release.sh)”</p> </blockquote> </li> <li>Generate uuid <blockquote> <p>v2ray uuid</p> </blockquote> </li> <li>Setup config.json</li> </ol> <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"inbounds"</span><span class="p">:</span><span class="w"> </span><span class="p">[{</span><span class="w">
    </span><span class="nl">"port"</span><span class="p">:</span><span class="w">  </span><span class="s2">"YOUR_PORT"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">Your</span><span class="w"> </span><span class="err">desired</span><span class="w"> </span><span class="err">port</span><span class="w">
    </span><span class="nl">"protocol"</span><span class="p">:</span><span class="w"> </span><span class="s2">"vmess"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"clients"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
          </span><span class="nl">"id"</span><span class="p">:</span><span class="w"> </span><span class="s2">"YOUR_UUID"</span><span class="p">,</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">Replace</span><span class="w"> </span><span class="err">with</span><span class="w"> </span><span class="err">a</span><span class="w"> </span><span class="err">generated</span><span class="w"> </span><span class="err">UUID</span><span class="w">
          </span><span class="nl">"alterId"</span><span class="p">:</span><span class="w"> </span><span class="mi">64</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">]</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"streamSettings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"network"</span><span class="p">:</span><span class="w"> </span><span class="s2">"tcp"</span><span class="w"> </span><span class="err">//</span><span class="w"> </span><span class="err">This</span><span class="w"> </span><span class="err">can</span><span class="w"> </span><span class="err">be</span><span class="w"> </span><span class="err">tcp</span><span class="p">,</span><span class="w"> </span><span class="err">kcp</span><span class="p">,</span><span class="w"> </span><span class="err">ws</span><span class="w"> </span><span class="err">(WebSocket)</span><span class="p">,</span><span class="w"> </span><span class="err">http</span><span class="p">,</span><span class="w"> </span><span class="err">etc.</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}],</span><span class="w">

    </span><span class="nl">"outbounds"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
    </span><span class="p">{</span><span class="w">
      </span><span class="nl">"protocol"</span><span class="p">:</span><span class="w"> </span><span class="s2">"socks"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"servers"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
          </span><span class="p">{</span><span class="w">
            </span><span class="nl">"address"</span><span class="p">:</span><span class="w"> </span><span class="s2">"127.0.0.1"</span><span class="p">,</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">Localhost</span><span class="p">,</span><span class="w"> </span><span class="err">where</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">SSH</span><span class="w"> </span><span class="err">tunnel</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">established</span><span class="w">
            </span><span class="nl">"port"</span><span class="p">:</span><span class="w"> </span><span class="mi">1080</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">The</span><span class="w"> </span><span class="err">local</span><span class="w"> </span><span class="err">port</span><span class="w"> </span><span class="err">where</span><span class="w"> </span><span class="err">the</span><span class="w"> </span><span class="err">SSH</span><span class="w"> </span><span class="err">tunnel's</span><span class="w"> </span><span class="err">SOCKS</span><span class="w"> </span><span class="err">proxy</span><span class="w"> </span><span class="err">is</span><span class="w"> </span><span class="err">listening</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">]</span><span class="w">
      </span><span class="p">},</span><span class="w">
      </span><span class="nl">"tag"</span><span class="p">:</span><span class="w"> </span><span class="s2">"ssh"</span><span class="w">  </span><span class="err">//</span><span class="w"> </span><span class="err">Optional</span><span class="w"> </span><span class="err">tag</span><span class="w"> </span><span class="err">for</span><span class="w"> </span><span class="err">identifying</span><span class="w"> </span><span class="err">this</span><span class="w"> </span><span class="err">outbound</span><span class="w">
    </span><span class="p">},</span><span class="w">
	</span><span class="p">{</span><span class="w">
    </span><span class="nl">"protocol"</span><span class="p">:</span><span class="w"> </span><span class="s2">"freedom"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"settings"</span><span class="p">:</span><span class="w"> </span><span class="p">{}</span><span class="w">
  </span><span class="p">}</span><span class="w">
  </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span></code></pre></div></div> <ol> <li>Validate config file <blockquote> <p>v2ray test -c /usr/local/etc/v2ray/config.json</p> </blockquote> </li> <li>Socks5 proxy over ssh <blockquote> <p>ssh -D 1080 user_on_server_B@localhost -p 12345</p> </blockquote> </li> <li>Start v2ray service <blockquote> <p>sudo systemctl start v2ray</p> </blockquote> </li> <li>Personal laptop (Client C) connect to v2ray server and access to internal resources . <blockquote> <p>Remember to expose your server port, i.e., the 12345 port on your cloud server. if still not working, reset the firewall rules:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>iptables <span class="nt">-F</span>
<span class="nb">sudo </span>iptables <span class="nt">-X</span>
</code></pre></div> </div> </blockquote> </li> </ol> <h2 id="pre-request-using-ssh-for-reverse-proxy-on-server-b">Pre-request using ssh for reverse proxy (On Server B):</h2> <ol> <li>Install autossh on server B <blockquote> <p>sudo apt install autossh 1.1 install without sudo</p> </blockquote> </li> <li>Reverse proxy to cloud vps with -R</li> </ol> <blockquote> <p>autossh -M 22222 -NfR 0.0.0.0:12345:22 user_on_server_A@remote_server_A</p> </blockquote> <ol> <li>Gateways and TCP forwarding <blockquote> <p>Uncomment the following and set to yes in /etc/ssh/sshd_config AllowTcpForwarding yes GatewayPorts yes</p> </blockquote> </li> </ol>]]></content><author><name>xyzzhangfan</name></author><category term="Linux"/><summary type="html"><![CDATA[Goal: Server A: A cloud server(i.e. AWS/Google Cloud/Oracle Cloud) with public IP address Server B: A internal server which may need vpn for access. Client C: A personal labtop/desktop trying to access the Server B without typing password to VPN everytime.]]></summary></entry><entry><title type="html">Docker Insufficient shared memory (shm) Error</title><link href="https://xyzzhangfan.github.io/blog/2023/Docker_insuffcient_memory-error/" rel="alternate" type="text/html" title="Docker Insufficient shared memory (shm) Error"/><published>2023-10-27T00:00:00+00:00</published><updated>2023-10-27T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2023/Docker_insuffcient_memory%20error</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2023/Docker_insuffcient_memory-error/"><![CDATA[<p>When I running a training experiment in docker I got the following error message:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ERROR: Unexpected bus error encountered in worker. This might be caused by insufficient shared memory (shm).
</code></pre></div></div> <p>The solution is adding the argument “–ipc=host” when running the docker container.</p> <p>References:</p> <ul> <li>https://docs.docker.com/engine/reference/run/#ipc-settings—ipc</li> <li>https://discuss.pytorch.org/t/training-crashes-due-to-insufficient-shared-memory-shm-nn-dataparallel/26396</li> </ul>]]></content><author><name>xyzzhangfan</name></author><category term="Pytorch"/><category term="Nvidia"/><category term="Docker"/><summary type="html"><![CDATA[When I running a training experiment in docker I got the following error message: ERROR: Unexpected bus error encountered in worker. This might be caused by insufficient shared memory (shm). The solution is adding the argument “–ipc=host” when running the docker container.]]></summary></entry><entry><title type="html">Nvidia Pytorch Usage</title><link href="https://xyzzhangfan.github.io/blog/2023/Nvidia-Pytorch-usage/" rel="alternate" type="text/html" title="Nvidia Pytorch Usage"/><published>2023-10-10T00:00:00+00:00</published><updated>2023-10-10T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2023/Nvidia-Pytorch-usage</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2023/Nvidia-Pytorch-usage/"><![CDATA[<h2 id="pulling-the-docker-image">Pulling the docker image</h2> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>```bash
docker pull nvcr.io/nvidia/pytorch:23.09-py3
```
</code></pre></div></div> <h2 id="runing-the-docker-with">Runing the docker with</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   docker run <span class="nt">--gpus</span> all <span class="nt">-it</span> <span class="nt">--rm</span> <span class="nt">-v</span> ./:/data nvcr.io/nvidia/pytorch:23.09-py3
</code></pre></div></div> <h2 id="importing-asp-to-test-it">Importing ASP to test it</h2> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   python
   from apex.contrib.sparsity import ASP
</code></pre></div></div>]]></content><author><name>xyzzhangfan</name></author><category term="Pytorch"/><category term="Nvidia"/><summary type="html"><![CDATA[Pulling the docker image ```bash docker pull nvcr.io/nvidia/pytorch:23.09-py3 ``` Runing the docker with docker run --gpus all -it --rm -v ./:/data nvcr.io/nvidia/pytorch:23.09-py3 Importing ASP to test it python from apex.contrib.sparsity import ASP]]></summary></entry><entry><title type="html">Install NVmain from Github 2022</title><link href="https://xyzzhangfan.github.io/blog/2022/Install_NVmain_on_Ubuntu/" rel="alternate" type="text/html" title="Install NVmain from Github 2022"/><published>2022-01-07T00:00:00+00:00</published><updated>2022-01-07T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2022/Install_NVmain_on_Ubuntu</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2022/Install_NVmain_on_Ubuntu/"><![CDATA[<h1 id="install-nvmain-from-github-2022">Install NVmain from Github 2022</h1> <h2 id="the-nvmain-github-reporsitory-is-outdated-if-you-try-to-compile-it-by-yourself-you-may-encounter-errors-such-as--importerror-no-module-named-gem5_scons-flipnwritecpp13135-error-implicitly-declared-constexpr-nvmnvmaddressnvmaddressconst-nvmnvmaddress-is-deprecated--werrordeprecated-copy--etc">The NVmain github reporsitory is outdated, if you try to compile it by yourself you may encounter errors such as: <code class="language-plaintext highlighter-rouge">ImportError: No module named gem5_scons:</code>, <code class="language-plaintext highlighter-rouge">FlipNWrite.cpp:131:35: error: implicitly-declared ‘constexpr NVM::NVMAddress::NVMAddress(const NVM::NVMAddress&amp;)’ is deprecated [-Werror=deprecated-copy]</code> , etc.</h2> <h2 id="the-following-steps-are-tested-on-ubuntu-2004">The following steps are tested on Ubuntu 20.04</h2> <ol> <li><code class="language-plaintext highlighter-rouge">Git clone https://github.com/SEAL-UCSB/NVmain.git</code></li> <li>install scons : <code class="language-plaintext highlighter-rouge">pip install scons</code></li> <li>if you are using python3 you need conver both SConstruct and SConscript using command <code class="language-plaintext highlighter-rouge">2to3 -w ./SConstruct</code> and <code class="language-plaintext highlighter-rouge">2to3 -w ./SConscript</code></li> <li>Comment out <code class="language-plaintext highlighter-rouge">from gem5_scons import Transform</code> from 36 lines in <code class="language-plaintext highlighter-rouge">./SConscript</code></li> <li>Add the following CCFLAG in to SConstruct to avoid error: <code class="language-plaintext highlighter-rouge">env.Append(CCFLAGS='-Wno-error=deprecated-copy')</code> I am using fast mode so I add it at 35 line. Ref: (https://stackoverflow.com/questions/51863588/warning-definition-of-implicit-copy-constructor-is-deprecated)</li> <li>Run <code class="language-plaintext highlighter-rouge">scons --build-type=fast to build NVmain</code></li> <li>Test <code class="language-plaintext highlighter-rouge">./nvmain.fast Config/PCM_ISSCC_2012_4GB.config</code><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/Screen%20Shot%202022-01-07%20at%2011.09.18%20AM.png" alt="Screen Shot 2022-01-07 at 11.09.18 AM"/></li> </ol>]]></content><author><name>xyzzhangfan</name></author><category term="NVmain"/><category term="Memory"/><category term="Linux"/><summary type="html"><![CDATA[Install NVmain from Github 2022]]></summary></entry><entry><title type="html">How to measure the power in Cadence Virtuoso</title><link href="https://xyzzhangfan.github.io/blog/2021/Cadence_power/" rel="alternate" type="text/html" title="How to measure the power in Cadence Virtuoso"/><published>2021-08-13T00:00:00+00:00</published><updated>2021-08-13T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2021/Cadence_power</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2021/Cadence_power/"><![CDATA[<h2 id="how-to-measure-the-power-in-cadence-virtuoso">How to measure the power in Cadence Virtuoso</h2> <p>1. In ADE-L choose Outputs –&gt; Save All</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210813194158.png" alt="Screen Shot 2021-08-13 at 7.37.49 PM"/></p> <p>2. Select the pwr in output.</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210813194211.png" alt="Screen Shot 2021-08-13 at 7.36.53 PM" width="100%"/></p> <p>3. Run the simulation, in the wave window select Browser –&gt; Results –&gt; Opern Results,. Then select the pdf file.</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210813194225.png" alt="Screen Shot 2021-08-13 at 7.38.22 PM"/></p> <p>4. In the resule browse windows, select tran to see the total power(pwr) or instance power(@[instance name] pwr)</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210813194234.png" alt="Screen Shot 2021-08-13 at 7.38.38 PM"/></p> <p>5. Right click pwr to open calculator for average/peak power expression.</p>]]></content><author><name>xyzzhangfan</name></author><category term="Candence Virtuoso"/><category term="Power Measurement"/><summary type="html"><![CDATA[How to measure the power in Cadence Virtuoso]]></summary></entry><entry><title type="html">a distill-style blog post</title><link href="https://xyzzhangfan.github.io/blog/2021/distill/" rel="alternate" type="text/html" title="a distill-style blog post"/><published>2021-05-22T00:00:00+00:00</published><updated>2021-05-22T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2021/distill</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2021/distill/"><![CDATA[<h2 id="equations">Equations</h2> <p>This theme supports rendering beautiful math in inline and display modes using <a href="https://www.mathjax.org/">MathJax 3</a> engine. You just need to surround your math expression with <code class="language-plaintext highlighter-rouge">$$</code>, like <code class="language-plaintext highlighter-rouge">$$ E = mc^2 $$</code>. If you leave it inside a paragraph, it will produce an inline expression, just like \(E = mc^2\).</p> <p>To use display mode, again surround your expression with <code class="language-plaintext highlighter-rouge">$$</code> and place it as a separate paragraph. Here is an example:</p> \[\left( \sum_{k=1}^n a_k b_k \right)^2 \leq \left( \sum_{k=1}^n a_k^2 \right) \left( \sum_{k=1}^n b_k^2 \right)\] <p>Note that MathJax 3 is <a href="https://docs.mathjax.org/en/latest/upgrading/whats-new-3.0.html">a major re-write of MathJax</a> that brought a significant improvement to the loading and rendering speed, which is now <a href="http://www.intmath.com/cg5/katex-mathjax-comparison.php">on par with KaTeX</a>.</p> <hr/> <h2 id="citations">Citations</h2> <p>Citations are then used in the article body with the <code class="language-plaintext highlighter-rouge">&lt;d-cite&gt;</code> tag. The key attribute is a reference to the id provided in the bibliography. The key attribute can take multiple ids, separated by commas.</p> <p>The citation is presented inline like this: <d-cite key="gregor2015draw"></d-cite> (a number that displays more information on hover). If you have an appendix, a bibliography is automatically created and populated in it.</p> <p>Distill chose a numerical inline citation style to improve readability of citation dense articles and because many of the benefits of longer citations are obviated by displaying more information on hover. However, we consider it good style to mention author last names if you discuss something at length and it fits into the flow well — the authors are human and it’s nice for them to have the community associate them with their work.</p> <hr/> <h2 id="footnotes">Footnotes</h2> <p>Just wrap the text you would like to show up in a footnote in a <code class="language-plaintext highlighter-rouge">&lt;d-footnote&gt;</code> tag. The number of the footnote will be automatically generated.<d-footnote>This will become a hoverable footnote.</d-footnote></p> <hr/> <h2 id="code-blocks">Code Blocks</h2> <p>Syntax highlighting is provided within <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> tags. An example of inline code snippets: <code class="language-plaintext highlighter-rouge">&lt;d-code language="html"&gt;let x = 10;&lt;/d-code&gt;</code>. For larger blocks of code, add a <code class="language-plaintext highlighter-rouge">block</code> attribute:</p> <d-code block="" language="javascript"> var x = 25; function(x) { return x * x; } </d-code> <p><strong>Note:</strong> <code class="language-plaintext highlighter-rouge">&lt;d-code&gt;</code> blocks do not look good in the dark mode. You can always use the default code-highlight using the <code class="language-plaintext highlighter-rouge">highlight</code> liquid tag:</p> <figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">x</span> <span class="o">=</span> <span class="mi">25</span><span class="p">;</span>
<span class="kd">function</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
<span class="k">return</span> <span class="nx">x</span> <span class="err">\</span><span class="o">*</span> <span class="nx">x</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure> <hr/> <h2 id="interactive-plots">Interactive Plots</h2> <p>You can add interative plots using plotly + iframes :framed_picture:</p> <div class="l-page"> <iframe src="/assets/plotly/demo.html" frameborder="0" scrolling="no" height="500px" width="100%" style="border: 1px dashed grey;"></iframe> </div> <p>The plot must be generated separately and saved into an HTML file. To generate the plot that you see above, you can use the following code snippet:</p> <figure class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">plotly.express</span> <span class="k">as</span> <span class="n">px</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span>
<span class="sh">'</span><span class="s">https://raw.githubusercontent.com/plotly/datasets/master/earthquakes-23k.csv</span><span class="sh">'</span>
<span class="p">)</span>
<span class="n">fig</span> <span class="o">=</span> <span class="n">px</span><span class="p">.</span><span class="nf">density_mapbox</span><span class="p">(</span>
<span class="n">df</span><span class="p">,</span>
<span class="n">lat</span><span class="o">=</span><span class="sh">'</span><span class="s">Latitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">lon</span><span class="o">=</span><span class="sh">'</span><span class="s">Longitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">z</span><span class="o">=</span><span class="sh">'</span><span class="s">Magnitude</span><span class="sh">'</span><span class="p">,</span>
<span class="n">radius</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span>
<span class="n">center</span><span class="o">=</span><span class="nf">dict</span><span class="p">(</span><span class="n">lat</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">lon</span><span class="o">=</span><span class="mi">180</span><span class="p">),</span>
<span class="n">zoom</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span>
<span class="n">mapbox_style</span><span class="o">=</span><span class="sh">"</span><span class="s">stamen-terrain</span><span class="sh">"</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
<span class="n">fig</span><span class="p">.</span><span class="nf">write_html</span><span class="p">(</span><span class="sh">'</span><span class="s">assets/plotly/demo.html</span><span class="sh">'</span><span class="p">)</span></code></pre></figure> <hr/> <h2 id="details-boxes">Details boxes</h2> <p>Details boxes are collapsible boxes which hide additional information from the user. They can be added with the <code class="language-plaintext highlighter-rouge">details</code> liquid tag:</p> <details><summary>Click here to know more</summary> <p>Additional details, where math \(2x - 1\) and <code class="language-plaintext highlighter-rouge">code</code> is rendered correctly.</p> </details> <hr/> <h2 id="layouts">Layouts</h2> <p>The main text column is referred to as the body. It is the assumed layout of any direct descendants of the <code class="language-plaintext highlighter-rouge">d-article</code> element.</p> <div class="fake-img l-body"> <p>.l-body</p> </div> <p>For images you want to display a little larger, try <code class="language-plaintext highlighter-rouge">.l-page</code>:</p> <div class="fake-img l-page"> <p>.l-page</p> </div> <p>All of these have an outset variant if you want to poke out from the body text a little bit. For instance:</p> <div class="fake-img l-body-outset"> <p>.l-body-outset</p> </div> <div class="fake-img l-page-outset"> <p>.l-page-outset</p> </div> <p>Occasionally you’ll want to use the full browser width. For this, use <code class="language-plaintext highlighter-rouge">.l-screen</code>. You can also inset the element a little from the edge of the browser by using the inset variant.</p> <div class="fake-img l-screen"> <p>.l-screen</p> </div> <div class="fake-img l-screen-inset"> <p>.l-screen-inset</p> </div> <p>The final layout is for marginalia, asides, and footnotes. It does not interrupt the normal flow of <code class="language-plaintext highlighter-rouge">.l-body</code> sized text except on mobile screen sizes.</p> <div class="fake-img l-gutter"> <p>.l-gutter</p> </div> <hr/> <h2 id="other-typography">Other Typography?</h2> <p>Emphasis, aka italics, with <em>asterisks</em> (<code class="language-plaintext highlighter-rouge">*asterisks*</code>) or <em>underscores</em> (<code class="language-plaintext highlighter-rouge">_underscores_</code>).</p> <p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p> <p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p> <p>Strikethrough uses two tildes. <del>Scratch this.</del></p> <ol> <li>First ordered list item</li> <li>Another item ⋅⋅* Unordered sub-list.</li> <li>Actual numbers don’t matter, just that it’s a number ⋅⋅1. Ordered sub-list</li> <li>And another item.</li> </ol> <p>⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we’ll use three here to also align the raw Markdown).</p> <p>⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅ ⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅ ⋅⋅⋅(This is contrary to the typical GFM line break behaviour, where trailing spaces are not required.)</p> <ul> <li> <p>Unordered list can use asterisks</p> </li> <li> <p>Or minuses</p> </li> <li> <p>Or pluses</p> </li> </ul> <p><a href="https://www.google.com">I’m an inline-style link</a></p> <p><a href="https://www.google.com" title="Google's Homepage">I’m an inline-style link with title</a></p> <p><a href="https://www.mozilla.org">I’m a reference-style link</a></p> <p><a href="http://slashdot.org">You can use numbers for reference-style link definitions</a></p> <p>Or leave it empty and use the <a href="http://www.reddit.com">link text itself</a>.</p> <p>URLs and URLs in angle brackets will automatically get turned into links. http://www.example.com or <a href="http://www.example.com">http://www.example.com</a> and sometimes example.com (but not on Github, for example).</p> <p>Some text to show that the reference links can follow later.</p> <p>Here’s our logo (hover to see the title text):</p> <p>Inline-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 1"/></p> <p>Reference-style: <img src="https://github.com/adam-p/markdown-here/raw/master/src/common/images/icon48.png" alt="alt text" title="Logo Title Text 2"/></p> <p>Inline <code class="language-plaintext highlighter-rouge">code</code> has <code class="language-plaintext highlighter-rouge">back-ticks around</code> it.</p> <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">s</span> <span class="o">=</span> <span class="dl">"</span><span class="s2">JavaScript syntax highlighting</span><span class="dl">"</span><span class="p">;</span>
<span class="nf">alert</span><span class="p">(</span><span class="nx">s</span><span class="p">);</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">s</span> <span class="o">=</span> <span class="sh">"</span><span class="s">Python syntax highlighting</span><span class="sh">"</span>
<span class="k">print</span> <span class="n">s</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>No language indicated, so no syntax highlighting.
But let's throw in a &lt;b&gt;tag&lt;/b&gt;.
</code></pre></div></div> <p>Colons can be used to align columns.</p> <table> <thead> <tr> <th>Tables</th> <th style="text-align: center">Are</th> <th style="text-align: right">Cool</th> </tr> </thead> <tbody> <tr> <td>col 3 is</td> <td style="text-align: center">right-aligned</td> <td style="text-align: right">$1600</td> </tr> <tr> <td>col 2 is</td> <td style="text-align: center">centered</td> <td style="text-align: right">$12</td> </tr> <tr> <td>zebra stripes</td> <td style="text-align: center">are neat</td> <td style="text-align: right">$1</td> </tr> </tbody> </table> <p>There must be at least 3 dashes separating each header cell. The outer pipes (|) are optional, and you don’t need to make the raw Markdown line up prettily. You can also use inline Markdown.</p> <table> <thead> <tr> <th>Markdown</th> <th>Less</th> <th>Pretty</th> </tr> </thead> <tbody> <tr> <td><em>Still</em></td> <td><code class="language-plaintext highlighter-rouge">renders</code></td> <td><strong>nicely</strong></td> </tr> <tr> <td>1</td> <td>2</td> <td>3</td> </tr> </tbody> </table> <blockquote> <p>Blockquotes are very handy in email to emulate reply text. This line is part of the same quote.</p> </blockquote> <p>Quote break.</p> <blockquote> <p>This is a very long line that will still be quoted properly when it wraps. Oh boy let’s keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can <em>put</em> <strong>Markdown</strong> into a blockquote.</p> </blockquote> <p>Here’s a line for us to start with.</p> <p>This line is separated from the one above by two newlines, so it will be a <em>separate paragraph</em>.</p> <p>This line is also a separate paragraph, but… This line is only separated by a single newline, so it’s a separate line in the <em>same paragraph</em>.</p>]]></content><author><name>Albert Einstein</name></author><category term="distill"/><category term="formatting"/><summary type="html"><![CDATA[an example of a distill-style blog post and main elements]]></summary></entry><entry><title type="html">Using VCS and DVE to simulate Verilog Code</title><link href="https://xyzzhangfan.github.io/blog/2021/VCS-tutorial/" rel="alternate" type="text/html" title="Using VCS and DVE to simulate Verilog Code"/><published>2021-04-07T00:00:00+00:00</published><updated>2021-04-07T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2021/VCS-tutorial</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2021/VCS-tutorial/"><![CDATA[<h2 id="using-vcs-and-dve-to-simulate-verilog-code">Using VCS and DVE to simulate Verilog Code</h2> <ol> <li> <p>Writing Verilog with any text editor(i.e. Vim/VS code/Sublime text)</p> </li> <li> <p>Run VCS with the following command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vcs <span class="nt">-Mupdate</span> <span class="nt">-RPP</span> <span class="nt">-v</span> <span class="o">[</span>YOU_Design_files.v] <span class="nt">-o</span> demo <span class="nt">-full64</span> <span class="nt">-debug_all</span>
<span class="c"># For example:</span>
vcs <span class="s1">'-Mupdate'</span> <span class="s1">'-RPP'</span> <span class="s1">'-sverilog'</span> <span class="s1">'stdlib_10lpe_ccs_20210527.v'</span> <span class="s1">'tb_Top_decoder_wo_scan_chain.sv'</span> <span class="s1">'Top_decoder_wo_scan_chain.sv'</span> <span class="s1">'WL_decoder_state_machine.4.0.syn.v'</span> <span class="s1">'SL_decoder_state_machine.4.0.syn.v'</span> <span class="s1">'BL_decoder_no_state_machine.4.0.syn.v'</span> <span class="s1">'Logical_part.syn.v'</span> <span class="s1">'-top'</span> <span class="s1">'tb_top_wo_scan_chain'</span> <span class="s1">'-o'</span> <span class="s1">'decoder_wo_scan_chain'</span> <span class="s1">'-full64'</span> <span class="s1">'-debug_all'</span>
</code></pre></div> </div> </li> <li> <p>A executable demo file now appared in your current folder. Run it with GUI:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./demo <span class="nt">-gui</span>
</code></pre></div> </div> </li> <li>DVE now opened with your design. Select the signals then right click them, choose add waves -&gt; new waves.</li> <li>From Simulator -&gt; Start to start the simulation, you now should have the waves.</li> </ol>]]></content><author><name>xyzzhangfan</name></author><category term="VCS"/><category term="Verilog"/><category term="Chip Design"/><summary type="html"><![CDATA[Using VCS and DVE to simulate Verilog Code]]></summary></entry><entry><title type="html">How to solve the error “Errors Font Helvetica, Times-Roman is not embedded” in IEEE PDF eXpress</title><link href="https://xyzzhangfan.github.io/blog/2021/Solving-IEEE-PDF-eXpress-font-not-embedded/" rel="alternate" type="text/html" title="How to solve the error “Errors Font Helvetica, Times-Roman is not embedded” in IEEE PDF eXpress"/><published>2021-04-03T00:00:00+00:00</published><updated>2021-04-03T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2021/Solving-IEEE-PDF-eXpress-font-not-embedded</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2021/Solving-IEEE-PDF-eXpress-font-not-embedded/"><![CDATA[<h2 id="how-to-solve-the-error-errors-font-helvetica--times-roman-is-not-embedded--in-ieee-pdf-express">How to solve the error “Errors: Font Helvetica, Times-Roman is not embedded “ in IEEE PDF eXpress</h2> <p>This error is due to some fonts in your uploaded PDF is not embedded. In my case, I have some figures saved as pdf format. Those figures contain the un-embedded fonts. So what I need to do is finding which figure contains the un-embedded fonts then convert it to embedded fonds. This step can be easily done by using Adobe acrobat with the following steps.</p> <ol> <li> <p>First, check the document properties by right clicking on the image then choose “Document Properties”. In the font tag you will see if there is any font is not embedded.</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210403005922.png" alt="Properties"/></p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210403005935.png" alt="before_conversion"/></p> </li> <li> <p>Clicking the File ==&gt; Save as Other ==&gt; Optimized PDF…</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210403005917.png" alt="save_as"/></p> </li> <li> <p>In the poped out new window change the marked region to “Acrobat 4.0 and later”. Then click “OK” and save it.</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210403005912.png" alt="Screen Shot 2021-04-03 at 12.25.34 AM"/></p> </li> <li> <p>Open the file you just saved, and check the “Document Properties” again. You should see all fonts are embedded now.</p> <p><img src="https://raw.githubusercontent.com/xyzzhangfan/pictures/main/img/20210403005906.png" alt="after_conversion"/></p> </li> <li> <p>Re-compile your manuscript and upload to IEEE-PDF-eXpress again, you should not have this error anymore.</p> </li> </ol>]]></content><author><name>xyzzhangfan</name></author><category term="PDF"/><category term="Adobe acrobat"/><category term="IEEE PDF eXpress"/><summary type="html"><![CDATA[How to solve the error “Errors: Font Helvetica, Times-Roman is not embedded “ in IEEE PDF eXpress]]></summary></entry><entry><title type="html">Some Usefull Commands in Cadence</title><link href="https://xyzzhangfan.github.io/blog/2021/usefull_command_in_cadence/" rel="alternate" type="text/html" title="Some Usefull Commands in Cadence"/><published>2021-03-31T00:00:00+00:00</published><updated>2021-03-31T00:00:00+00:00</updated><id>https://xyzzhangfan.github.io/blog/2021/usefull_command_in_cadence</id><content type="html" xml:base="https://xyzzhangfan.github.io/blog/2021/usefull_command_in_cadence/"><![CDATA[<h3 id="unlock-file-in-cadence">Unlock file in cadence</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-name</span> <span class="s1">'*.cdslck'</span> <span class="nt">-exec</span> <span class="nb">rm</span> <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div> <hr/> <h3 id="source-ic617cshrc">Source ic617.cshrc</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s2">"alias cadence_tool 'source /usr/local/cadence/IC617.cshrc; cd ~/cadence617;virtuoso&amp;'"</span> <span class="o">&gt;&gt;</span> ~/.tcshrc
</code></pre></div></div> <hr/> <h3 id="change-default-simulator-to-spectre">Change default simulator to spectre:</h3> <p>In .cdsenv:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asimenv.startup       simulator       string  "spectre"
</code></pre></div></div> <p>In .cdsini:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>	    (if (isFile "./.cdsenv")
		(envLoadVals 
		 ?envFile "./.cdsenv"
		 ?tool "ALL"))
</code></pre></div></div> <hr/> <h3 id="add-models-in-default">add models in default:</h3> <p>In .cdsini:</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>asiSetEnvOptionVal(asiGetTool('spectre) "modelFiles"
	list(
	list("/usr/local/cadence/NCSU/ncsu-cdk-1.5.1/models/spectre/standalone/tsmc25N.m")
	list("/usr/local/cadence/NCSU/ncsu-cdk-1.5.1/models/spectre/standalone/tsmc25P.m")
	)
     )
</code></pre></div></div> <hr/> <h3 id="check-the-vnc-session-number">Check the VNC session number:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ps <span class="nt">-ef</span> | <span class="nb">grep</span> <span class="sb">`</span><span class="nb">whoami</span><span class="sb">`</span> | <span class="nb">grep </span>vnc | <span class="nb">grep </span>Xorg
</code></pre></div></div> <h3 id="kill-the-vnc-session">Kill the VNC session:</h3> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vncserver <span class="nt">-kill</span> :&lt;Session Number&gt;
</code></pre></div></div> <hr/>]]></content><author><name>xyzzhangfan</name></author><category term="Cadence"/><category term="Linux"/><category term="bash"/><summary type="html"><![CDATA[Unlock file in cadence]]></summary></entry></feed>